// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Base {
    id          String      @id @default(cuid())
    name        String      @default("Untitled Base")
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @default(now())
    createdBy   String
    user        User        @relation(fields: [createdBy], references: [id])
    tables      Table[]
}

model Table {
    id          String      @id @default(cuid())
    name        String
    baseId      String
    createdBy   String
    base        Base        @relation(fields: [baseId], references: [id])
    user        User        @relation(fields: [createdBy], references: [id])

    columns     Column[]
    rows        Row[]
}

model Row {
    id          String      @id @default(cuid())
    tableId     String
    table       Table       @relation(fields: [tableId], references: [id])

    cells       Cell[]
}

model Column {
    id          String      @id @default(cuid())
    name        String
    type        String
    tableId     String
    table       Table       @relation(fields: [tableId], references: [id])

    cells       Cell[]
}

model Cell {
    id          String      @id @default(cuid())
    value       String?
    rowId       String
    colId       String
    row         Row         @relation(fields: [rowId], references: [id])
    col         Column      @relation(fields: [colId], references: [id])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bases         Base[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
